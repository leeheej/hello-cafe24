[조건문]
조건문이란 프로그램 내에서 주어진 조건식의 결과에 따라 별도의 명령을 수행하도록 제어하는 명령문입니다.
- if 문
if 문은 조건식의 결과가 참(true)이면 주어진 명령문을 실행하며, 거짓(false)이면 아무것도 실행하지 않습니다
if (조건식) {
    조건식의 결과가 참일 때 실행하고자 하는 명령문;
}
- else 문
if 문과 같이 사용할 수 있는 else 문은 if 문의 조건식 결과가 거짓(false)일 때 주어진 명령문을 실행합니다.
if (조건식) {
    조건식의 결과가 참일 때 실행하고자 하는 명령문;
}
else {
    조건식의 결과가 거짓일 때 실행하고자 하는 명령문;
}
- elseif 문
elseif 문은 if 문처럼 조건식을 설정할 수 있으므로, 중첩된 if 문을 좀 더 간결하게 표현할 수 있습니다.
하나의 조건문 안에서 if 문과 else 문은 단 한 번만 사용될 수 있습니다.
하지만 elseif 문은 여러 번 사용되어 다양한 조건을 설정할 수 있습니다.
if (조건식1) {
    조건식1의 결과가 참일 때 실행하고자 하는 명령문;
}
elseif (조건식2) {
    조건식2의 결과가 참일 때 실행하고자 하는 명령문;
}
else {
    조건식1의 결과도 거짓이고, 조건식2의 결과도 거짓일 때 실행하고자 하는 명령문;
}

- switch 문
switch 문은 if / else 문과 마찬가지로 주어진 조건 값에 따라 프로그램이 다른 명령을 수행하도록 하는 조건문입니다.
이러한 switch 문은 if / else 문보다 가독성 측면에서 더 좋습니다.
switch (조건 값)
{
    case 값1:
        조건 값이 값1일 때 실행하고자 하는 명령문;
        break;
    case 값2:
        조건 값이 값2일 때 실행하고자 하는 명령문;
        break;
    ...
    default:
        해당 case가 없을 때 실행하고자 하는 명령문;
        break;
}
default 절은 조건 값이 위에 나열된 어떠한 case 절에도 해당하지 않을 때 실행됩니다.
이 구문은 반드시 존재해야 하는 것은 아니며, 필요할 때만 선언할 수 있습니다.
각 case 절 및 default 절은 반드시 break 키워드를 포함하고 있어야 합니다.
break 키워드는 조건 값에 해당하는 case 절이나 default 절이 실행된 뒤에 전체 switch 문을 빠져나가게 해줍니다.


[반복문]
반복문이란 프로그램 내에서 같은 명령을 일정 횟수만큼 반복하여 수행하는 명령문입니다.
-while문
특정 조건을 만족할 때까지 주어진 명령문을 반복해서 실행합니다.
while(조건식){
    조건식의 결과가 참인 동안 반복적으로 실행하고자하는 반복문
}

-do / while 문
while문은 루프에 진입하기 전에 먼저 표현식부터 검사합니다.
do/while 문은 먼저 루프를 한 번 식행한 후 표현식을 검사합니다. -> 표현식의 결과와 상관없이 무조건 한 번은 루프를 실행합니다.
do {
    조건식의 결과가 참인 동안 반복적으로 실행하고자 하는 명령문
} while(조건식)
==>
$i = 0;
$j = 0;
while($i > 5){
    echo"변수 i의 값은".(++$i)."입니다<br>";
}
do { // do/while문은 조건식과 상관없이 반드시 한 번은 루프를 실행함
    echo"변수 j의 값은".(++$j)."입니다.<br>";
}while($j>5);

-for문
초기식, 증감식, 표현식을 모두 포함하는 반복문.
for(초기식; 조건식; 증감식){
}
==>
for ($i=0; $i < 5; $i++){
    echo"{$i}<br>";
}

-foreach문
배열의 모든 요소를 손쉽게 순회할 수 있도록 해줌.
이 반복문은 루프마다 배열의 각 요소를 지정된 변수에 대입.
이렇게 대입받은 변수를 이용하면 루프 안에서 배열의 각 요소에 순차적으로 접근할 수 있음.
따라서 foreach는 정확히 배열의 길이(length)만큼 반복.
foreach(배열 as 값을 저장할 변수){
    실행하고자 하는 명령문;
}
==>
$arr = array(2,4,6,8);
foreach($arr as $value){
    echo "변수 \$value의 현재값은 {$value}입니다.<br>";
}
unset($value);
==>
$arr = array(
    "둘" => 2,
    "넷" => 4,
    "여섯" => 6,
    "여덟" => 8,
);
foreach($arr as $key => $value){
    echo"배열\$arr에서 키값'{$key}'에 대한 값은 {$value}입니다<br>";
}
unset($value);

[기타 제어문]
*루프의 제어
일반적으로 조건식의 검사를 통해 루프로 진입하면, 다음 조건식을 검사하기 전까지 루프 안에 있는 모든 명령문을 실행합니다.
사용자는 continue와 break를 통해 일반적인 루프의 흐름을 직접 제어할 수 있습니다.

-continue
루프 내에서 해당 루프의 나머지 부분을 건너뛰고, 바로 다음 조건식의 판단으로 넘어가게 합니다.
보통 반복문 내에서 특정 조건에 대한 처리를 제외하고자 할 때 자주 사용됩니다.
다음 예제는 1부터 100까지의 정수 중, 4의 배수를 제외하고 출력하는 예제입니다.
$exceptNum = 4;
for($i=0; $i<=100; $i++){
    if($i % $exceptNum ==0)
        continue;
    echo"($i)";
}

-break
 해당 반복문을 완전히 종료하고 다음에 위치한 명령문으로 이동시킴.
 루프 내에서 조건식의 판단 결과에 상관없이, 반복문을 완전히 빠져나가고 싶을 때 사용.
 다음 예제는 1부터 100까지의 합을 구하는 예제.
 $sum = 0;
 $startNum = 1;
 $endNum = 100;
 $i = $startNum;
 while(true){ //일부러 만든 무란 루프
    $sum += $i;
    if($i == $endNum)
        break;
    $i++;
 }
 echo "{$startNum}에서부터 {$endNum}까지 더한 값은 {$sum}입니다.";
 
 -goto
 프로그램의 흐름을 지정된 레이블{lable}로 무조건 변경하는 명령문.
 아무 조건없이 제어를 옮겨줌. 가장 손쉽게 사용할 수 있지만, 프로그램의 흐름을 매우 복잡하게 만들기도함.(거의 사용x)
 
 **제어문의 대체 문법**
 php는 제어문을 위해 사용할 수 있는 또 하나의 대체 문법을 제공
 조건문에서는 if, switch / 반복문에서는 while, for, foreach 에 사용 가능.
 대체 문법의 사용 방법은 우선 제어문을 여는 괄호{를 클론: 으로 대체.
 그리고 닫는 괄호를 각각 endif; endswitch; endwhile; endfor; endforeach; 로 대체.
 <?php $var = 5; ?>
 <?php if ($var > 6): ?>
 변수의 값은 6보다 큽니다.
 <?php elseif($var==6): ?>
 변수의 값은 6입니다.
 <?php elseif($var <6): ?>
 변수의 값은 6보다 작습니다.
 <?php endif; ?>
