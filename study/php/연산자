[산술 연산자 (arithmetic operator)]
사칙연산. 기본이며 가장 많이 사용됨.
+ 더하기 - 빼기 * 곱하기 / 나누기 
% 나눈 나머지값 ** 제곱

[대입 연산자 (assignment operator)]
= 왼쪽의 피연산자에 오른쪽의 피연산자를 대입함.
- 복합 대입 연산자
+= 왼쪽의 피연산자에 오른쪽의 피연산자를 더한 후 왼쪽의 피연산자에 대입함
-= 왼쪽의 피연산자에 오른쪽의 피연산자를 뺀 후 왼쪽의 피연산자에 대입함
*= 왼쪽의 피연산자에 오른쪽의 피연산자를 곱한 후 왼쪽의 피연산자에 대입함
/= 왼쪽의 피연산자를 오른쪽의 피연산자로 나눈 후 왼쪽의 피연산자에 대입함
%= 왼쪽의 피연산자를 오른쪽의 피연산자로 나눈 후 그 나머지를 왼쪽의 피연산자에 대입함
.= 왼쪽의 피연산자의 문자열에 오른쪽의 피연산자의 문자열을 추가한 후 왼쪽의 피연산자에 대입함
<<= 왼쪽의 피연산자의 비트를 오른쪽의 피연산자만큼 전부 왼쪽으로 이동시킨 후 그 결과를 왼쪽의 피연산자에 대입함
>>= 왼쪽의 피연산자의 비트를 부호를 유지하면서 오른쪽의 피연산자만큼 전부 오른쪽으로 이동시킨 후 그 결과를 왼쪽의 피연산자에 대입함
&= 왼쪽의 피연산자와 오른쪽의 피연산자의 논리식이 모두 true이면 왼쪽 피연산자에 true를 대입하고, 그 외에는 false를 대입함
!= 왼쪽의 피연산자나 오른쪽의 피연산자의 논리식 중 하나라도 true이면 왼쪽 피연산자에 true를 대입하고, 그 외에는 fasle를 대입함
^= 왼쪽 피연산자의 논리식과 오른쪽 피연산자의 논리식이 서로 다르면 왼쪽 피연산자에 true를 대입하고, 그 외는 false를 대입함

[증감 연산자(increment and decrement operator)]
증감 연산자는 피연산자를 1씩 증가 혹은 감소시킬 때 사용하는 연산자.
++$var 먼저 피연산자의 값을 1 증가시킨 후 해당 연산을 수행
$var++ 먼저 해당 연산을 수행하고 나서, 피연산자의 값을 1 증가
--$var 먼저 피연산자의 값을 1 감소시킨 후 해당 연산을 수행
$var-- 먼저 해당 연산을 수행하고 나서, 피연산자의 값을 1 감소

[비교 연산자(comparison opertator)]
비교 연산자는 피연산자 사이의 상대적 크기를 판단하여, 참과 거짓을 반환.
비교 연산자는 모두 두 개의 피연산자를 가지는 이항 연산자이며, 피연산자들의 결합 방향은 왼쪽에서 오른쪽 결합
== 왼쪽의 피연산자와 오른쪽의 피연산자가 같으면 참을 반환
=== 왼쪽의 피연산자와 오른쪽의 피연산자가 같고, 같은 타입이면 참을 반환
!= 왼쪽의 피연산자와 오른쪽의 피연산자가 같지 않으면 참을 반환
<> 왼쪽의 피연산자와 오른쪽의 피연산자가 같지 않으면 참을 반환
!== 왼쪽의 피연산자와 오른쪽의 피연산자가 같지 않거나, 타입이 다르면 참을 반환
< 왼쪽의 피연산자가 오른쪽의 피연산자보다 작으면 참을 반환
<= 왼쪽의 피연산자가 오른쪽의 피연산자보다 작거나 같으면 참을 반환
// 다양한 타입 비교
bool, null : 둘 다 불리언으로 변환 후 비교
string, resource, integer, float : 숫자로 시작하는 문자열과 리소스는 숫자로 변환 후 비교
object : 내장 클래스는 자신이 비교 함수를 정의할 수 있으나, 다른 클래스끼리 비교 불가. 객체가 다른 모두와 비교될땐 객체가 큰걸로 판단
array : 배열끼리의 비교는 같은 키를 가지는 값을 서로 비교.
        이때 피연산자1 배열의 키가 피연산자2 배열에 존재하지 않으면 비교 불가. 배열 요소의 수가 적은 쪽이 작은거로 판단
        
[논리 연산자(logical operator)]
and 논리식이 모두 참이면 참을 반환
or 논리식 중에서 하나라도 참이면 참을 반환
xor 논리식이 서로 다르면 참을 반환
&& 논리식이 모두 참이면 참을 반환
|| 논리식 중에서 하나라도 참이면 참을 반환
! 논리식의 결과가 참이면 거짓을, 거짓이면 참을 반환

[비트 연산자(bitwise operator)]
비트 연산자는 논리 연산자와 비슷하지만, 비트(bit) 단위로 논리 연산을 수행
또한, 비트 단위로 전체 비트를 왼쪽이나 오른쪽으로 이동시킬때도 사용
& 대응되는 비트가 모두 1이면 1을 반환
| 대응되는 비트 중에서 하나라도 1이면 1을 반환
^ 대응되는 비트가 서로 다르면 1을 반환
~ 비트를 1이면 0으로, 0이면 1로 반전
<< 지정한 수만큼 비트를 전부 왼쪽으로 이동
>> 부호를 유지하면서 지정한 수만큼 비트를 전부 오른쪽으로 이동시킴

[기타 연산자]
- 삼항 연산자 (ternary operator)
유일하게 피연산자를 세 개나 가지는 조건 연산자.
조건식? 반환값1 : 반환값2
물음표 앞의 표현식에 따라 결과값이 참이면 반환값1을 반환하고, 결과값이 거짓이면 반환값2를 반환
$num_01 = 15;
$num_02 = 8;
$result = ($num_01 > $num_02) ? $num_01 : $num_02;
echo "둘 중에 더 큰 수는 {$result}입니다";

- 문자열 연산자(string operator)
php에서 문자열 연산자(.)를 사용하여 문자열을 연결 가능.
$str_01 ="php 수업";
$str_02 ="에 오신것을 환영합니다";
echo "두 문자열을 합친 문자열은 ' " .($str_01.$str_02)" ' 입니다." ;

- 배열 합집합 연산자(array union operator)
(+) 피연산자로 오는 두 배열의 합집합을 반환.
왼쪽 피연산자로 오는 배열의 키값은 유지하면서, 오른쪽 피연산자로 오는 배열을 덧붙이는 방식. 
$arr_01 = array("1st" => "php", "2nd" => "sql");
$arr_02 = array("1st" => "html", "2nd" => "css", "3rd" => "jquery");

$result_01 = $arr_01 + $arr_02; // php, sql, jquery

- instanceof 연산자
1. 해당 변수가 어떤 클래스에서 생성된 객체인지 확인할때
2. 해당 변수가 부모 클래스에서 상속받은 클래스인지 확인할 때
3. 해당 변수가 인스턴스인지 아닌지 확인할 때
4. 해당 변수가 인터페이스로 구현한 클래스 객체 인스턴스인지 아닌지 확인할 때
