함수란?
하나의 특별한 목적의 작업을 수행하도록 설계된 독립적인 블록을 의미.
함수를 사용하는 가장 큰 이유는 반복적인 코드의 작성을 피할 수 있기 때문.
프로그램에서 하나의 특정 작업을 여러번 반복해야 할 때는 해당 작업을 수행하는 함수를 작성 후 필요할 때마다 함수를 호출.
또한, 프로그램을 여러 개의 함수로 나누어 작성하면 모듈화로 인해 전체적인 코드의 가독성이 좋아짐과 동시에 문제가 발생하거나 기능 변경이 요구될 때 유지보수가 쉬워짐.

함수의 구조
1. 함수 이름 // 함ㅅ를 구분하는 식별자
2. 괄호 안에 쉼표로 구분되는 함수의 매개변수(parameter) // 함수를 호출할 때 인수로 전달된 값을 함수 내부에서 사용할 수 있도록 해주는 변수
3. 중괄호로 둘러쌓인 php 수행코드
function 함수이름(매개변수1, 매개변수2, ...){
  함수가 호출 되었을 때 실행될 코드;
}

사용자 정의 함수
php에서는 미리 작성되어 제공되는 많은 내장 함수들이 있으나, 직접 함수를 만들수도 있는데 이러한 함수를 사용자 정의 함수라고 함.
php에서 함수 이름을 작성할 때 주의사항.
- 함수의 이름은 문자와 숫자, 언더스코어(_)만 사용
- 함수의 이름은 숫자로 시작 안됨
- 여러 함수가 같은 이름 사용 불가
- 함수의 이름은 대소문자 구분 없음 (그래도 선언한 그대로 호출하는 것이 좋음)
- php는 오버로딩을 지원하지 않으므로, 이미 선언도니 함수를 다시 선언 불가.
- php가 미리 정의하여 제공된 함수는 모든 스크립트에서 사용 가능하나, 사용자 정의 함수는 해당 함수가 정의된 php 스크립트에서만 호출 가능.
- php에서 함수는 반환(return)문을 포함할 수도 있고 포함하지 않을 수도 있음.
  반환문은 배열이나 객체를 포함한 php에서 사용할 수 있는 모든 타입의 값을 반환함.
  funtion sum($x, $y){ // 함수의 이름은 sum이며 변수 x,y를 매개변수로 가짐
    return $x + $y; // 매개변수 x,y를 더한 값을 반환
  }
  echo sum(1,2) // 함수 sum 에 숫자 1,2를 인수로 전달하여 호출함.
  cf) php 7 부터는 함수의 반환값 타입을 지정해서 원하는 타입으로 반환받을 수 있음.
  기본값은 약한 강도 (타입이 일치하지 않으면 자동 타입 변환을 통해 명시된 타입으로 변화된 반환값)
  강한강도 (반환값 타입이 일치하지 않으면 오류 발생)
  * 약한 강도
  function($x, $y):float {
    return $x + $y;
  }
  var_dump(sum(3 + 4)); // float 반환
  }
  * 강한 강도
  declare(strict_type=1); //strict 모드로 설정
  function sum($x, $y) : float {
    return $x + $y;
  }
  var_dump(sum(3+4)); // erro
  var_dump(sum(3 + 4.5)); //float
  

매개변수(parameter)
함수를 호출할 때 인수로 전달된 값을 함수 내부에서 사용할 수 있게 해주는 변수.
- 매개변수의 전달 방식
  1. 값 전달(passing by value)
  인수를 함수에 전달하면, 새롭게 생서된 매개변수에 전달받은 값이 복사되어 저장됨
  이처럼 매개변수에 저장된 값은 전달받은 데이터의 복사본으로, 함수 안에서 변경되어도 함수 밖의 원본 데이터에는 영향주지 않음
  funciton increment($para){
    $para++; // $value의 값을 복사하여 increment() 함수에 인수로 전달함
  }
  $value = 1;
  increment($value);
  $para는 1에서 2로 증가하지만 $value는 변하지 않음
  2. 참조 전달(passing by reference)
  함수 내부에서 함수 밖으로 데이터를 조작하기 위해서는 해당 변수를 전역 변수로 선언할 수 있음.
  하지만 참조 전달을 이용하면 더욱 유연한 코드를 작성 가능.
  참조 전달은 원본 데이터의 복사된 값을 가지는 것이 아니라, 원본 데이터를 그대로 참조.
  -> 내부에서 값을 변경하면 함수 밖의 원본 데이터도 같이 변경됨.
  참조 전달을 사용하기 위해서는 함수를 선언할 때 매개변수 앞에  '&'기호를 붙임.
  function increment(&$para){
    $para++;
  }
  $value=1;
  increment($value);
  3. 디폴트 매개변수 default parameter
  디폴트 매개변수란 함수를 호출할 때 명시된 매개변수를 전달하지 않았을 경우에 사용하게 될 기본값을 의미.
  함수를 호출할 때 함수의 정의에서 명시된 매개변수의 수만큼 인수가 전달되지 않으면, php에서는 오류 발생.
  하지만 디폴트 매개변수를 설정하면, 함수 호출 시 전달할 인수의 수를 유연하게 설정 가능.
  php에서 디폴트 매개변수는 매개변수 이름과 함께 대입 연산자(=)를 이용해 설정.
  function sum($value1, $value2=0. $value3=0) //value1은 반드시 인수로 전달받아야 하지만, value2,value3은 만약 전달받지 못하면 설정된 기본값을 사용.
  function sum($value1=0, $value2, $value3=0){
    return $value1 + $value2 = $value3;
  }
  echo sum(1,2,3) // 6
  echo sum(1,2) // 3
  echo sum(1) // erro 매개변수는 왼쪽부터 차례대로 대입되므로, 중간에 에러가 발생되면 종료됨
  echo sum() // erro
인수(argument)
함수가 호출될 때 함수로 값을 전달해주는 변수
  1. 가변 길이 인수 목록 (variable-length argument list)
  함수를 선언할 때 전달받은 인수의 개수를 미리 정하지 않고, 호출할 때마다 유동적으로 인수를 넘기는 기능.
  php5.5 이하에서는 func_num)args(), func_get_arg(), func_get_args() 함수를 사용하여 설정
  php5.6 이상에서는 "..."토큰을 사용하여 간편하게 설정.
  function sum(){
    $sum = 0;
    foreach(func_get_args() as $n){ //php5.5
      $sum += $n;
    }
    return $sum;
  }
  위의 예제에서 func_get_args()함수는 sum()함수가 호출될 때 전달된 인수들을 배열의 형태로 반환.
  -> sum()함수 내부에서는 매개변수 대신에 func_get_args()함수를 통해 인수에 접군 -> 인수의 개수에 신경 쓸 필요 없게됨.
  function sum(...$num){ //php5.6
    $sum = 0;
    foreach($num as $n){
      $sum += $n;
    }
    return $sum;
  }
  '...'토큰을 사용하여 함수가 호출될 때 전달받은 인수들을 배열의 형태로 저장 가능.
  -> sum()함수 내부에서는 배열 $num를 이용하여 전달받은 인수에 접근 가능.
  
함수의 활용
  1. 조건적인 함수(conditional function)
  특정 조건을 만족할 때만 선언되는 함수.
  $makefunc = true; 
  // func(); 를 여기서는 함수가 선언되기 전이므로 불가. php 오류발생함
  if($makefunc){
    function func(){
      echo "now you can use this func"
    }
    func(); // func()함수가 선언되었으므로 호출 가능
  }
  
  2. 함수안의 함수(function within function)
  php에서 함수 안에 또 다른 함수 선언 가능. php에서 모든 함수가 전역 함수이므로, 함수 내부에서 선언된 함수라도 외부에서 호출 가능.
  function out(){
    function in(){
      echo "now you can use this func";
    }
  }
  // in(); 함수 선언되기 전이므로 호출 불가
  out(); // 가능
  in(); // 함수 선언되었으므로 호출 가능.
  
  3. 재귀 함수(recursive function)
  함수 내부에서 함수가 자기 자신을 또 다시 호출하는 함수. 끝없이 반복됨 -> 재귀 호출을 중단하는 조건 명령문 반드시 포함.
  => 100번 이상의 재귀 호출은 스택의 한계에 도달하여 스크립트가 중단될 수 있으므로, 사용 안하는것이 좋음.
  function factorial($num){
    if($num > 1) //1이 될 때까지
      return $num * factorial($num - 1); // 1씩 감소시킨 값을 전달하여 자기 자신을 계속 호출
    else
      return 1;
  }
  echo factorial(4);
  
  4. 가변 함수(variable function)
  변수를 사용하여 함수를 호출하는 것을 의미. php에서 변수 이름에 괄호()를 붙이면 해당 변수의 값과 같은 이름을 가지는 함수를 호출.
  -> 변수에 함수의 이름을 별도로 지정할 수 있음
  function first(){
    echo "first() 함수입니다.";
  }
  return second($para){
    ehco "second() 함수 입니다.";
    ehco "함수 호출 시 전달받은 인수값은 {$para}입니다";
  }
  $func = "first";
  $func(); // first();
  $func = "second";
  $func(20); // second();
