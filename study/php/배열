배열(array)이란?
PHP에서 배열(array)은 맵(map)으로 이루어진, 순서가 있는 집합을 의미합니다.
맵(map)은 한 쌍의 키(key)와 값(value)으로 이루어져 있습니다.
이때 배열을 구성하는 각각의 맵을 배열 요소(array element)라고 합니다.
배열은 데이터를 많이 다뤄야 하는 경우 사용할 수 있는 가장 기본적인 자료 구조입니다.

[1차원 배열]
$배열이름 = array();
배열 요소의 참조
$배열이름[인덱스]

$arr = array();     // 배열 생성
$arr[0] = "apple";  // 배열 요소 추가
$arr[1] = "banana";
$arr[2] = "orange";

$arr = array("apple", "banana", "orange");  // 배열 생성과 동시에 초기화
$arr[0] = "apple";  // 배열이 존재하지 않으므로, 먼저 배열을 생성한 후에 요소가 추가됨.
$arr[1] = "banana";
$arr[2] = "orange";

$arr[] = "apple";  // 배열 인덱스를 생략하여, 순서대로 배열에 추가됨.
$arr[] = "banana";
$arr[] = "orange";

- 배열의 홀
$arr = array();            // 배열의 생성
$arr[10] = "banana";       // 인덱스 10에만 배열 요소를 추가함.

var_dump($arr);
var_dump($arr[0]);         // NULL
var_dump(isset($arr[0]));  // false
var_dump(isset($arr[10])); // true

- 루프를 이용한 배열로의 접근
$arr = array("apple", "banana", "orange");
for($i = 0; $i < count($arr); $i++){
    echo $arr[$i]."<br>";
}
하지만 앞서 살펴본 홀(hole)을 가지는 배열에서는 for 문을 사용하면 모든 배열 요소에 접근할 수 없습니다.
따라서 PHP에서는 특별한 반복문인 foreach 문을 제공하여 for 문보다 간편하게 배열 요소에 접근할 수 있도록 해줍니다.
$arr = array(); // 배열의 생성 
$arr[2] = "apple";
$arr[3] = "banana";
$arr[4] = "orange";
// $arr[0]과 $arr[1]은 배열의 홀(hole)이 됨.

for ($i = 0; $i < count($arr); $i++) {
    echo "\\$arr[{$i}] : ".$arr[$i]."<br>";
}

foreach ($arr as $element){
    echo $element."<br>";
}


[다차원 배열(multidimensional array)]
* 2차원 배열
2차원 배열이란 배열 요소로 또 다른 1차원 배열을 사용하는 배열을 의미합니다.
$배열이름 = array(
    array(),
    array(),
    ...
);
2차원 배열은 1차원 배열과 같이 array() 함수를 사용하여 선언합니다.
1차원 배열과 다른 점은 array() 함수를 한 번 더 사용하여, 배열 요소에 또 다른 1차원 배열을 생성한다는 점입니다.
$arr = array( // 1차원 배열을 3개 갖는 2차원 배열 선언
    array(),
    array(),
    array()
);

$arr[0][0] = "apple"; // 배열 요소 입력
$arr[0][1] = "korea";
$arr[0][2] = 1000;

$arr[1][0] = "banana";
$arr[1][1] = "philippines";
$arr[1][2] = 2000;

$arr[2][0] = "orange";
$arr[2][1] = "us";
$arr[2][2] = 1500;

echo $arr[0][0].", ".$arr[0][1].", ".$arr[0][2]."<br>";
echo $arr[1][0].", ".$arr[1][1].", ".$arr[1][2]."<br>";
echo $arr[2][0].", ".$arr[2][1].", ".$arr[2][2]";

$arr = array( // 1차원 배열을 3개 갖는 2차원 배열 선언과 동시에 초기화
    array("apple", "korea", 1000),
    array("banana", "philippines", 2000),
    array("orange", "us", 1500)
);
-루프를 이용한 2차원 배열로의 접근
for($row = 0; $row < 3; $row++) {
    for($column = 0; $column < count($arr[$row]); $column++){
        echo $arr[$row][$column].", ";
    }
}
* 3차원 배열
3차원 배열은 배열 요소로 2차원 배열을 사용하는 배열을 의미합니다.
$배열이름 = array(
    array(
        array(),
        array(),
        ...
    ),
    array(
        array(),
        array(),
        ...
    ),
    ...
);

1, 2차원 배열과 마찬가지로 3차원 배열도 생성과 동시에 초기화할 수 있습니다.
$배열이름 = array(
    array(
        array(배열요소000, 배열요소 001, ...),
        array(배열요소010, 배열요소 011, ...),
        ...
    ),
    array(
        array(배열요소100, 배열요소 101, ...),
        array(배열요소110, 배열요소 111, ...),
        ...
    ),
    ...
);

간단히 생각해서 3차원 배열은 가로와 세로 거기에 높이까지 가진 정육면체 모양으로 생각할 수 있습니다
$arr = array( // 2차원 배열을 2개 갖는 3차원 배열 선언과 동시에 초기화
    array(
        array("apple", "korea", 1000),
        array("banana", "philippines", 2000),
        array("orange", "us", 1500)
    ),
    array(
        array("carrot", "vietnam", 500),
        array("cucumber", "korea", 1000),
        array("pumpkin", "china", 2000)
    )
);

[연관 배열]
PHP에서는 숫자뿐만 아니라 문자열도 배열 요소의 인덱스로 사용할 수 있습니다.
만약 정수와 문자열 이외에 다른 타입의 값을 키값으로 사용하면, 내부적으로 정수와 문자열로 타입 변환이 이루어집니다.
연관 배열(associative array)은 이처럼 배열의 인덱스를 정수뿐만이 아닌 다양한 타입으로 설정한 배열을 의미합니다.
이러한 연관 배열을 사용하면 키값에 좀 더 명확한 의미를 부여할 수 있습니다.
$배열이름 = array();
$배열이름["키"] = 값;

$array = array();        // 배열 생성
$array["apple"] = 1000;  // 연관 배열 요소 추가
$array["banana"] = 2000; 
$array["orange"] = 1500;

$배열이름 = array("키1" => 값1, "키2" => 값2, ...);
// 연관 배열 생성과 동시에 초기화
$array = array("apple" => 1000, "banana" => 2000, "orange" => 1500);
echo $array["apple"].", ".$array["banana"].", ".$array["orange"];

$array = array("apple" => 1000); // 연관 배열 생성과 동시에 초기화
$array["banana"] = 2000;         // 생성된 연관 배열에 요소 추가
$array["orange"] = 1500;

만약 해당 배열이 존재하지 않으면, 해당 이름으로 새로운 배열을 만든 후에 배열 요소를 추가합니다.
$array["apple"] = 1000;  // 배열이 존재하지 않으므로, 먼저 배열을 생성한 후에 요소가 추가됨.
$array["banana"] = 2000;
$array["orange"] = 1500;
echo $array["apple"].", ".$array["banana"].", ".$array["orange"];

- 루프를 이용한 연관 배열로의 접근
$array = array("apple" => 1000, "banana" => 2000, "orange" => 1500);
each() 함수는 배열 커서(array cursor)가 현재 가리키고 있는 배열 요소를 반환하고, 다음 배열 요소를 가리키도록 합니다.

이 함수는 가리키는 요소의 다음 요소가 배열의 마지막 요소라면 더는 동작하지 않습니다.
foreach ($array as $key => $value) {
    echo $key." ".$value."<br>";
}
each() 함수는 배열 커서(array cursor)가 현재 가리키고 있는 배열 요소를 반환하고, 다음 배열 요소를 가리키도록 합니다.
이 함수는 가리키는 요소의 다음 요소가 배열의 마지막 요소라면 더는 동작하지 않습니다.
$array = array("apple" => 1000, "banana" => 2000, "orange" => 1500);
while($element = each($array)) {
    echo $element['key']." ".$element['value']."<br>";
}
