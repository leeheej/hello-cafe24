[변수 관련 함수]
1. 변수의 타입 변경
gettype() 함수는 전달받은 변수의 타입을 문자열로 반환. (단, float형은 "double"을 반환, 표준 타입이 아닌 경우엔 "unknown type" 반환)
settype() 함수는 전달받은 변수의 타입을 boolean(bool), integer(int), string, object 중 변경
-> php4.2 부터는 float, null 사용 가능. 성공적으로 변경하면 true, 못햇을 경우엔 false를 반환.
$x = 5;
echo gettype($x); // integer
settype($x, "string");
echo gettype($x); // string

- is_array() // 전달받은 변수의 타입이 배열인지 확인
- is_bool() // 전달받은 변수의 타입이 논리형인지 확인
- is_callable() // 전달받은 변수의 내용을 함수처럼 호출할 수 있는지 확인
- is_float(), is_double(), is_real() // 전달받은 변수의 타입이 실수인지 확인
- is_int(), is_integer(), is_long() // 전달받은 변수의 타입이 정수인지 확인
- is_null() // 전달받은 변수의 타입이 null인지 확인
- is_numeric() // 전달받은 변수가 수나 숫자로 이루어진 문자열인지를 확인
- is_object() // 전달받은 변수의 타입이 객체인지 확인
- is_resource() // 전달받은 변수의 타입이 자원인지 확인
- is_scalar() // 전달받은 변수가 스칼라값인지 확인 (integer, float, string, boolean 타입인지 확인 / php에서 array, object, resource 타입은 스칼라값 아님)
- is_string() // 전달받은 변수의 타입이 문자열인지 확인

2. 변수의 상태 변경
isset()함수는 전달받은 변수가 선언되어 있는지를 검사(선언된 변수가 존재하면 true, 존재하지 않으면 false 반환)
unset()함수는 전달받은 변수를 제거.
empty()함수는 전달받은 변수가 비어있는지 검사(변수가 존재하고, 해당 변수가 비어있지 않으면 false 반환, 선언되지 않거나 삭제, 존재하지 않거나 false값을 가진 변수는 true)
- php에서는 다음과 같은 값을 가진 변수를 비어있다고 인식.
  정수 0, 실수 0.0, 문자열"0", 빈 문자열"", null, flase, 빈 배열, 초가화되지 않은 변수

3. 특정 타입으로 변수 변경
intval() 함수는 전달받은 변수에 해당하는 정수를 반환
floatval(), doubleval() 함수는 전달받은 변수에 해당하는 실수를 반환
strval() 함수는 전달받은 변수에 해당하는 문자열 반환
$x = "123.56789abc";
echo intval($x); // 123
echo floatval($x); // 123.56789
echo strval($x); // 123.56789abc


[배열 관련 함수]
배열을 생성하기 위해선 array() 함수 사용.
count(), sizeof()함수는 배열에 저장된 배열 요소의 개수 반환
array_count_values() 함수는 배열 요소의 값을 모두 확인하여 해당 값이 몇 번 등장하는지 체크하고 배열 요소의 값을 키(key)로 하고, 등장 빈도를 value로 하는 연관배열을 반환.
$arr = array(1,5,7,3,3,1,2);
echo .count($arr).; //7
echo .sizeof($arr).; //7
$acv = array_count_values($arr); // 1:2번, 5:1번, 7:1번, 3:2번, 2:1번

current(), pos(0함수는 배열 포인터가 현재 가리키고 있는 요소를 반환. 포인터는 배열이 생성되면 자동으로 첫 번째 요소를 가리킴.
next() 함수는 우선 배열 포인터를 앞으로 하나 이동시킨 후 값을 반환
prev() 함수는 배열 포인터를 뒤로 하나 이동시킨 후 값을 반환
each() 함수는 배열 포인터가 현재 가리키고 있는 요소의 키와 값을 연관 배열로 반환하고, 배열 포인터를 앞으로 하나 이동.
reset() 함수는 배열 포인터가 첫 번째 요소를 가리키도록 한 뒤, 해당 요소 값을 반환
end() 함수는 배열 포인터가 마지막 배열 요소를 가리키도록 한 뒤, 해동 요소의 값을 반환
$arr = array(2,3,7,4,6);
$element = current($arr);
while($element){
  echo $element;
  $element = next($arr);
}  // 2,3,7,4,6

$element = end($arr);
while($element){
  echo $element;
  $element = prev($arr);
} // 6,4,7,3,2

sort() 함수는 배열 요소들을 정렬 기준에 맞게 정렬. (대소문자 구분, 대문자가 소문자보다 앞쪽. 정렬 성공하면 true, 실패하면 false. 정렬 기준 전달하지 않으면 타입 변경없이 비교)
$arr = array(15,2,1,21,121);
sort($arr); // 1,2,15,21,121
sort($arr, SORT_NUMERIC); // 배열 요소를 숫자로 비교 -> 1,2,15,21,121
sort($arr, SORT_STRING); // 배열 요소를 문자열로 비교 -> 1,121,15,2,21

ksort() 함수는 각 요소의 키 기준으로 정렬
asort() 함수는 각 요소의 값을 기준으로 정렬
$arr = array("apple"=>1000, "banana" => 2000, "orange"=>1500);
asort($arr); // apple, orange, banana
ksort($arr); // apple, banana, orange

- array_multisort() // 여러 배열이나 다차원 배열의 배열 요소를 정렬함
- natcasesort() // 대소문자를 구분하지 않는 영문숫자 순의 알고리즘으로 배열 요소를 정렬
- natsort() // 영문숫자순의 알고리즘으로 배열 요소 정렬
- usort() // 사용자가 정의한 비교 함수를 사용하여, 배열 요소의 값을 기준으로 정렬
- uksort() // 사용자가 정의한 비교 함수를 사용하여, 배열 요소의 키를 기준으로 정렬
- uasort() // 사용자가 정의한 비교 함수를 사용하여, 인덱스 연관성을 유지한 채 배열요소를 정렬

shuffle()함수는 배열 요소를 섞은 뒤 무작위로 재배치
array_reverser()함수는 전달받은 배열의 순서를 역순으로 변경한 새로운 배열 반환
$arr = array(1,2,3,4,5);
$arr1 = array(1,2,3,4,5);
$arr2 = array_reverse($arr1);
shuffle($arr);
for($i = 0; $i < count($arr2); $i++){
  echo $arr2[$i].","; // 5,4,3,2,1
}
for($i = 0; $i < count($arr1); $i++){
  echo $arr1[$i].","; // 1,2,3,4,5
}

[문자열 관련 함수]
strlen() 전달받은 문자열의 길이를 반환. 한글이 포함된 문자열이 전달되면, 문자열의 길이가 아닌 문자열의 총 byte 반환.
mb_strlen() 문자열뿐만 아니라 두 번째 인수로 인코딩 방식까지 전달받을 수 있음. 인코딩 인수까지 전달받으면 문자열 길이 반환. 
$str = "1234";
$str1 = "한글문자열"
echo strlen($str); // 4
echo strlen($str1); // 5글자 * 한글 한 글자당 3byte = 15
echo mb_strlen($str1); // 15
echo mb_strlen($str1, "UTF-8"); // 5

strcmp() 함수는 전달받은 두 개의 문자열을 서로 비교.(대소문자 구분. strncasecmp()를 사용하면 대소문자 구분 없이 두 문자열 비교 가능)
첫 번째 인수의 문자열이 두 번째의 인수의 문자열보다 크면 양수를, 작으면 음수를 반환. 두 문자열이 완전이 같으면 0 반환. 
echo strcmp("abc", "ABC"); // 양수
echo strncasecmp("abc","ABC"); // 0
echo strcmp("2","10"); // 양수
echo strncasecmp("2","10"); // 음수

- 특정 문자열 검색
strstr(), strchr() 함수는 해당 문자열에서 전달받은 문자열과 처음으로 일치하는 부분을 찾음. 
해당 문자열에 일치하는 부분이 존재하면, 처음으로 일치하는 부분을 포함한 이후의 모든 문자를 같이 반환. 일치하는 부분이 없으면 false.
strrchr() 함수는 해당 문자열에서 전달받은 문자열과 마지막으로 일차하는 부분 찾음.
해당 문자열에 일차하는 부분이 존재하면, 마지막으로 일치하는 부분을 포함한 이후의 모든 문자를 같이 반환. 없으면 false.
echo strstr("ABCabcDEFabc","abc"); // abcDEFabc
echo strrchr("ABCabcDEFabc","abc"); // abc
echo stristr("ABCabcDEFabc","abc"); // ABCabcDEFabc (대소문자 구분 안함)

strpos() 해당 문자열에서 전달받은 문자열과 처음으로 일치하는 부분의 시작 인덱스를 반환
strrpos() 해당 문자열에서 전달받은 문자열과 마지막으로 일치하는 부분의 시작 인덱스를 반환
echo strpos("ABCabcDEFabc", "abc"); // 3
echo strrpos("ABCabcDEFabc", "abc"); // 9

substr() 해당 문자열에서 특정 인덱스부터 전달받은 길이만큼의 일부분을 추출하여 반환
전달받은 인덱스가 양수이면 해당 인덱스부터 문자열 끝까지 반환, 음수이면 절대값만큼 문자열 반환
$str = "hello, world";
echo substr($str, 3); // 네 번째 문자부터 끝까지 출력
echo substr($str,-3); // 끝에서 세 글자 출력
echo substr($str, 1, 5); // 두 번째 문자부터 다섯 글자 출력
echo substr($str, 1, -5); // 두 번째 문자부터 뒤에서 여섯 번째 문자까지 출력

echo strtolower("HELLO"); // hello
echo strtoupper("hello"); // HELLO
echo ucfirst("hello"); // Hello
echo ucwords("hello world"); // Hello World

explode() 함수는 특정 문자를 기준으로 전달받은 문자열을 나누어서 하나의 배열로 반환
implode(), join() 함수는 전달받은 배열의 각 요소를 특정 문자를 사용하여 하나로 합쳐진 문자열로 반환
strtok() 함수는 전달받은 문자열을 특정 문자를 기준으로 토큰화.(문자열을 한 번에 모두 나누지 않고, 한 번에 하나씩만 토큰화)
$str = "hello, beautiful, world";
$array = explode(",", $str);
echo $array[0]; // hello
echo $array[1]; // beautiful
echo $array[2]; // world
$str2 = implode("!", $array);
echo $str2; // hello! beautiful! world!
$token = strtok($str2, '!');
echo $token; // hello
while($token != ""){
  $token = strtok('!');
  echo $token; // beautiful, world
}

문자열 대체
$str = "hello, world";
echo str_replace('o', '*', $str); // 문자열의 모든 'o'를 '*'로 대체함
echo substr_replace($str, '*', 2); // 세 번째 문자부터 끝까지 '*'로 대체함
echo substr_replace($str, '*',-2); // 끝에서 두 번째 문자부터 끝까지를 '*'로 대체함
echo substr_replace($str, '*',2, 4); // 세 번째 문자부터 네 글자를 '*'로 대체함
echo substr_replace($str, '*',2, -4); // 세 번째 문자부터 끝에서 다섯 번째 문자까지를 '*'로 대체함
echo substr_replace($str, '*',2, 0); // 두 번째 문자 뒤에 '*'을 삽입함

ltrim() 함수는 문자열 앞부분에 있는 공백을 제거하고, rtrim(),chop()함수는 문자열 끝부분 공백을 제거함.
trim()함수는 문자열의 처음과 끝부분에 있는 공백 모두 제거.
- 띄어쓰기 " "
- 탭 문자 "\t"
- 줄 바꿈 문자 "\n", "\r"
- 널 문자 "\0"
- 수직 탭 문자 "\x0B"

$str = "  hello, world!  ";
echo "'".ltrim($str)."'<br/>"; // 문자열의 처음 부분 공백을 모두 지움. 
echo "'".rtrim($str)."'<br/>"; // 문자열의 끝부분 공백을 모두 지움.
echo "'".trim($str)."'";       // 문자열의 처음과 끝부분 공백을 모두 지움.
