이미지 최적화

[이미지 종류]
브라우저에 어떻게 렌더링 되는냐에 따라 레스터 or 벡터 타입
이미지의 손실을 어느정도 허용하느냐에 따라 무손실 or 손실 이미지

-레스터 이미지
픽셀에 표현하고자 하는 색상을 그려서 이미지 형태로 표현(jpg, png, gif 등)
픽셀이 모여서 하나의 이미지를 만들기 때문에, 사이즈가 크거나 품질이 더 좋은 이미지를 만들기 위해 픽셀이 추가되서 용량이 늘어나고 렌더링 속도도 저하됨
-벡터 이미지
이미지 안에 수많은 수학 방정식을 포함하고 있는 방식의 이미지 형태.
선의 표현, 크기, 색상 등의 정보를 이미지 안에 있는 계산식으로 연산하여 이미지를 제공.
사이즈가 커지거나 작아져도 이미지가 깨지거나 정보가 달라지지 않음 (아이콘, 폰트 등에 주로 사용, svg가 대표적
단,이미지가 복잡할수록 이미지 안 정보가 늘어나서 용량이 커짐

-무손실 이미지
원본 이미지에서 이미지를 렌더링하는데 필요하지 않은 정보들을 제거한 이미지 (gif, png가 대표적)
-손실 이미지
무손실 이미지의 화질 감소를 감수하면서도 사이즈를 줄여 빠른 렌더링을 할 수 있는 이미지(jpeg가 대표적).
일반적으로 사람이 품질 저하를 거의 눈치재지 못하면서 품질을 낮출 수 있는 퍼센트는 100~75%
(구글 썸네일은 74~76%, 페이스북은 85% 정도의 손실 이미지 사용)

-WebP
2010 구글에서 개발한 이미지 포맷.
손실 압축과 비손실 압축을 전부 지원함.
vp8이라는 비디오 코덱 기술을 기반으로 한 영상압축 방식을 사용하며, 파일 크기를 25~35%정도로 압축할 수 있음.
투명, 애니메이션 기능도 지원하므로 gif, png, jpg등의 상용 이미지 포멧을 대체 가능.
하지만 디바이스 사양에 따라서 상용 이미지 포맷보다 더 높은 리소스를 필요해 하거나, ie를 지원하지 않는 단점
-AVIF
2017 AOMedia에서 개발한 이미지 포맷.
손실 압축과 비 손실 압푹을 전부 지원하기 때문에 gif, png, jpeg등 상용 이미지 포맷 대체 가능.
애니메이션 기능이 있어 움직이는 이미지로 쓸 수 있고, 압축 효율이 WebP보다 뛰어남.
하지만 지원하는 뷰워가 적고, 브라우저 지원율이 낮는 등 범용성이 낮음.
또한, 단순 패턴 이미지를 압축하는 경우 png보다 낮은 압축율을 보여질 때도 있음

[이미지 최적화 방법]

-브라우저 사이즈에 맞춰 적절한 이미지 제공
이미지를 다양한 사이즈에 대응할 수 있도록 적절한 브레이트 포인트를 설정하여 사이즈를 조절
  *미디어 쿼리 활용
  .image-box {
    max-width: 100%;
    width: 400px;
    height: 400px;
    background-image: url(./small.png);
    background-repeat: no-repeat;
    background-size: contain;
    padding: 10px
  }

  @media (min-width: 401px) {
    .image-box {
      width: 700px;
      height: 700px;
      background-image: url(./midium.png);
    }
  }

  @media (min-width: 701px) {
    .image-box {
      width: 1000px;
      height: 1000px;
      background-image: url(./large.png);
    }
  }
  
  *<img>태그의 srcset속성 활용
  이미지 소스의 세트라는 의미로, 같은 비율의 다양한 크기를 가지는 동일 이미지들을 명시하는 속성.
  단, px단위가 아닌 w디스크립터 혹은 x디스크립터를 입력해야하며, 작은 이미지부터 순서대로 입력해야함.
  size는 미디어 조건과 그 조건에 해당하는 이미지의 최적화 출력 크기를 지정(ie는 지원 안됨)
  브라우저가 사용하는 연산 빙식이나 메모리 혹은 파워가 충분하지 않을땐 불안정하게 작동할 수 있음
  <img 
     srcset="./small.png 400w,
             ./medium.png 700w,
             ./large.png 1000w"
     sizes="(max-width: 401px) 400px,
            (max-width: 700px) 7000px,
            1000px"
     src="./large.png"
  />
  
  *<picture>태그 활용
  특정 브라우저에서 특정 이미지를 사용할 수 있도록 강제할 수 있음.
  조건에 맞지 않는 이미지는 다운로드 하지 않음.
  이미지를 숨겨도 이미지를 다운로드하고 이미지를 줄여도 다른 이미지가 보여지지 않는 img태그의 문제 해결 가능.
  html 소스가 길어진다는 점과 ie및 안드로이드 구버전 브라우저에서는 지원하지 않음 (polyfill을 사용해서 어느정도 해결가능)
  <picture>
      <source media="(min-width: 700px)" srcset="/examples/images/people_960.jpg">
      <source media="(min-width: 400px)" srcset="/examples/images/people_575.jpg">
      <img src="/examples/images/people_200.jpg" alt="People">
  </picture>

- lazy loading

  
