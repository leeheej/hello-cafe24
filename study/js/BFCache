BFCache
: 즉각적인 뒤로 및 앞으로 탐색을 가능하게 하는 브라우저 최적화.
Back/forward cache의 약자로 브라우저 최적화 중 하나. 
- 사용자가 브라우저 내에서 뒤로가기/앞으로가기 했을 경우 이전 페이지를 전체 캐싱해서 in memory로(자바스크립트 heap 영역까지) 가지고 있는 것을 말한다.
- 전체 페이지를 in memory에 저장하므로 뒤로가기/앞으로가기 했을때 복구가 훨씬 빠르고, 그러다보니 사용자 경험을 굉장히 향상시킬 수 있다.

마주할 수 있는 문제상황을 예시로 들면 아래와 같다.
문제 상황1. (뒤로가기/앞으로가기시) BFCache로 인해 로그를 전송하는 코드가 호출 되지 않음.
문제 상황2. (뒤로가기/앞으로가기시) 페이지 초기화를 위한 코드가 불리지 않음. 등등

BFCache vs HTTP Cache
- HTTP 캐시는 이전에 만들어진 요청에 대한 응답만 캐싱함.
- 페이지 로딩에 필요한 최적화를 HTTP캐시로 모두 하기는 어렵기 때문에
- BFCache를 사용하지 않고, 아무리 최적화를 잘 했다고 하더라도 BFCache를 사용한 경우가 무조건 빠르다.

브라우저별 BFCache 지원 상황
- Firefox, Safari → 몇 년전 부터 지원해 왔음(desktop, mobile 모두)
- Chrome 
    v86: Android(일부), cross-site navigation만 지원
    v87: Android(전부), same-site navigation까지 지원 예정

BFCache 작동을 판단할 수 있는 API 
pageshow / pagehide (Page Transition API)
: 거의 모든 브라우저에서 지원하는 이벤트(BFCache만큼 오래된 이벤트)
- pageshow
    - 페이지가 처음 로드될 때, 그리고 bfcache에서 페이지가 복원 될 때 마다 load 이벤트가 불린 직후에 실행된다.
    - persisted property를 이용해서 BFCache로 복구되었는지 확인 할 수 있다.
    window.addEventListener('pageshow', function(event){
      if(event.persisted){
        console.log('This page was restored from the bfcache');
      }else{
        console.log('This page was loaded normally');
      }
    });
    
- pagehide
    - 페이지가 정상적으로 로드되지 않거거나, 브라우저가 페이지를 bfcache에 저장하려고 할 때 발생한다.
    -  persisted property가 false면 bfcache에 저장되지 않았다는 뜻이다. 
    - 브라우저가 페이지를 캐시하려고 했지만 캐시할 수 없게 만드는 요인이 있을 수 있기 때문에,
      true라고 항상 bfcache에 캐싱되었다고 할 수는 없다. (=브라우저가 bf캐싱을 하려고 했다는 '의도'만 알 수 있다는 뜻)
    window.addEventListener('pagehide', function(event){
      if(event.persisted==true){
        console.log('This page might be entering the bfcache.');
      }else{
        console.log('This page will unload normally and be discarded.')
      }
    });

- page lifecycle event
: 크롬 기반 브라우저에서만 지원되는 이벤트(새로 생김)
  - resume
    : BFCache로 들어가고 나올때 호출되는 이벤트 (그 외의 상황에서 호출되기도 함)
    (CPU 사용량을 최소화하기 위해 백그라운드 탭이 동작되는 경우 등)
    BFCache에서 페이지가 복원될 때 (pageshow 이벤트 직전에), 사용자가 정지된 배경 탭을 다시 방문할때 실행
  - freeze
    : pagehide 이벤트의 presisted 값이 true일 경우에, pagehide 이벤트 다음으로 호출됨
      pagehide와 동일하게 브라우저가 BFCache를 하려고 했다는 '의도'만 알 수 있음.
      
      
[[BFCache를 위해 페이지 최적화 하는 팁]]
모든 페이지가 bfcache에 저장되는 것은 아니다. 또한 bfcache에 저장되었다고 하더라도 무한정 그곳에 머무르지는 않을 것이다.
개발자들이 캐시 적중률을 극대화하기 위해 페이지를 bfcache에 적격, 혹은 부적격하게 만드는 이유를 이해하는 것이 중요하다.

1) unload 이벤트 사용하지 않기
모든 브라우저에서 bfcache를 최적화하는 가장 중요한 방법은 unload이벤트를 절대로 사용하지 않는 것이다.
unload이벤트는 bfcache 이전에 선행된다. 근데 unload이벤트가 발생한 후에는 페이지가 더이상 존재하지 않을 것이라는 가정하에, 
많은 페이지가 운영되기 때문에 브라우저를 개발하는 입장에서 unload가 있는 경우 bfcache를 할 지 말지가 큰 딜레마였다고 한다.
그래서 브라우저는 페이지에 unload 이벤트 리스너가 추가되어 있는 경우 bfcache에 적합하지 않은 페이지로 판단하는 경우가 많다.
- unload 이벤트 보다는 pagehide 이벤트를 사용(pagehide는 unload가 불리는 모든 경우에 다 불린다)
- Lighthouse v6.2.0 에서 no-unload-listeners-audit 까지 추가함
- 꼭 unload 이벤트 리스너를 추가해야할 경우, beforeunload 이벤ㅌ 리스너를 추가
  (beforeunload 이벤트 리스너는 브라우저가 bfcache에 부적격(ineligible)한 요소로 판단하지 않음
  
2) window.opner 참조를 피하기
몇몇 브라우저에서는 window.open(), rel="noopener"를 사용하지 않고 target=_black를 통해서 새 창을 여는 코드로 작성한 경우,
열린 창에는 열게한 창의 window object에 대한 참조가 있다.
이렇게 window.opner가 null이 아닌 참조가 되어 있는 경우, bfcache에 안전하게 넣을 수 없다.
왜냐하면 보안 문제가 있을 뿐 아니라, bfcache에 액세스를 시도하는 모든 페이지가 깨질 수 있기 때문이다.
- rel="noopener"를 사용하여 target=_blank를 통해 새 창을 열도록 하자
- 만약 새 창을 열고, window.postMassage()를 통해 그것을 제어하거나 window object를 직접 참조할 필요하 없다면,
  열린 창이나 열게한 창 모두 bfcache 할 자격이 없다
  
3) navigate 하기 전에 항상 open된 connection 닫기
- setTimeout(), promise와 같이 코드가 아직 실행중인데, 다른 페이지로 이동한 경우에는 
브라우저가 진행중인 setTimeout나 promise 코드를 일시정지하고 다시 bfcache 에서 복원될 때, 진행중이던 코드를 재개한다.
schedule된 javascript task들이 단지 dom api에 접근한다거나, 해당 페이지에만 영향을 주는 고립된 api라면
일시정지 했다가 다시 재개하는게 문제가 되지 않을 것이다.
그러나 scheduled된 task가 same-origin의 다른 페이지에서도 엑세스 할 수 있는 api의 경우(예: indexedDB, Web Locks, WebSockets, etc.)
작업을 일시 중지했을때, 다른 탭의 코드가 실행되지 않을 수 있기 때문에 문제가 발생할 수 있다.

그러므로 대부분 브라우저에서 아래와 같이 connection이 open된 경우에는 bfcache에 해당 페이지를 넣으려고 하지 않는다.
- Pages with an unfinished IndexedDB transaction
- Pages with in-progress fetch() or XMLHttpRequest
- Pages with an open WebSocket or WebRTC connection
pagehide나 freeze 이벤트에서 항상 connection을 close하고, observer를 제거하거나 연결을 끊는 것이 좋다. 
이렇게 하면 다른 열린 탭에 영향을 미치지 않고 페이지를 안전하게 캐시할 수 있다. 
(당연하겠지만, pageshow나 resume 이벤트에서 bfcache로 부터 복구됬을때 커넥션을 다시 연결 해주도록 하면 된다.)

