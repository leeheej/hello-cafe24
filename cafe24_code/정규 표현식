정규표현식(正規表現式, Regular Expression)은 문자열을 처리하는 방법 중의 하나로 특정한 조건의 문자를 '검색'하거나 '치환'하는 과정을 매우 간편하게 처리 할 수 있도록 하는 수단이다.

javascript 에서는 정규 표현식도 객체로서, RegExp의 exec()와 test() 메서드를 사용할 수 있습니다. 
 String의 match(), matchAll() (en-US), replace(), replaceAll() (en-US), search(), split() 메서드와도 함께 사용할 수 있습니다. 

- 정규 표현식 만들기
  1. 정규 표현식 리터럴 : 다음과 같이 슬래시로 패턴을 감싸서 작성
    const re = /ab+c/
  2. RegExp 객체의 생성자 호출 (외부 출처에서 가져오는 경우 사용)
    const re = new RegExp('ab+c')
    
- 정규 표현식 패턴 작성하기
  1. 단순 패턴 사용하기
    단순 패턴은 문자열을 있는 그대로 탐색할 때 사용합니다. 
    예를 들어, /abc/ 패턴은 문자열에서 정확한 순서로 "abc"라는 문자의 조합이 나타나는 부분과 일치합니다. 
    그러므로 이 패턴은 "Hi, do you know your abc's?"와 "The latest airplane designs evolved from slabcraft." 두 문자열에서 일치에 성공하고, 
    일치하는 부분은 "abc"일 것입니다. 반면 "Grab crab"에서는 일치하지 않는데, 이 문자열은 부분 문자열로 "ab c"를 포함하긴 하지만, 정확하게 "abc"를 포함하지는 않기 때문입니다.
  2. 특수 문자 사용하기
    하나 이상의 "b"를 찾는다거나 공백 문자를 찾는 등 직접적인 일치 이상의 탐색이 필요할 땐 특수 문자를 사용합니다.
    예컨대 "하나의 "a" 이후에 0개 이상의 "b", 그 뒤의 "c""와 일치해야 하면 /ab*c/ 패턴을 사용할 수 있습니다.
    "b" 뒤의 *는 "이전 항목의 0번 이상 반복"을 의미합니다. 이 패턴을 문자열 "cbbabbbbcdebc"에 대해 사용하면, 일치하는 부분 문자열은 "abbbbc"일 것입니다.
    
- 정규 표현식 특수문자
  1. 문자 클래스 (en-US)
    \, ., \cX, \d, \D, \f, \n, \r, \s, \S, \t, \v, \w, \W, \0, \xhh, \uhhhh, \uhhhhh, [\b]
  2. 어서션
    ^, $, x(?=y), x(?!y), (?<=y)x, (?<!y)x, \b, \B
  3. 그룹과 범위
    (x), (?:x), (?<Name>x), x|y, [xyz], [^xyz], \Number
  4. 수량자 (en-US)
    *, +, ?, x{n}, x{n,}, x{n,m}
  5. 유니코드 속성 이스케이프 (en-US)
    \p{UnicodeProperty}, \P{UnicodeProperty}
    
- 이스케이핑
  : 특수 문자를 있는 그대로 탐색("*"을 직접 찾는 등)해야 하는 경우, 특수 문자 앞에 역슬래시(\)를 배치해서 이스케이프 해야 합니다. 
  예를 들어 "a" 뒤의 별표("*") 뒤의 "b"와 일치해야 하면 /a\*b/를 사용하면 됩니다. 역슬래시가 "*"를 "이스케이프"해서, 특수 문자가 아닌 문자 리터럴로 취급합니다.
  리터럴 역슬래시에 일치하려면 역슬래시를 이스케이프합니다. "A:\", "B:\", "C:\", ..., "Z:\"와 일치하는 패턴은 /[A-Z]:\\/입니다. 
  앞의 역슬래시가 뒤의 역슬래시를 이스케이프해서, 결과적으로 하나의 리터럴 역슬래시와 일치하게 됩니다.
  function escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') // $&은 일치한 문자열 전체를 의미
  }
  
- JavaScript에서 정규 표현식 사용하기
정규 표현식은 RegExp의 메서드 test()와 exec(), String의 메서드 match(), replace(), search(), split()에서 사용할 수 있습니다.

exec()	문자열에서 일치하는 부분을 탐색합니다. 일치 정보를 나타내는 배열, 또는 일치가 없는 경우 null을 반환합니다.
test()	문자열에 일치하는 부분이 있는지 확인합니다. true 또는 false를 반환합니다.
match()	캡처 그룹을 포함해서 모든 일치를 담은 배열을 반환합니다. 일치가 없으면 null을 반환합니다.
matchAll() (en-US)	캡처 그룹을 포함해서 모든 일치를 담은 반복기를 반환합니다.
search()	문자열에서 일치하는 부분을 탐색합니다. 일치하는 부분의 인덱스, 또는 일치가 없는 경우 -1을 반환합니다.
replace()	문자열에서 일치하는 부분을 탐색하고, 그 부분을 대체 문자열로 바꿉니다.
replaceAll() (en-US)	문자열에서 일치하는 부분을 모두 탐색하고, 모두 대체 문자열로 바꿉니다.
split()	정규 표현식 또는 문자열 리터럴을 사용해서 문자열을 부분 문자열의 배열로 나눕니다.
